{"version":3,"sources":["components/tile.js","container/bingo.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","id","children","onToggle","isSet","className","onClick","data","shuffle","splice","reduce","value","index","lineChecker","obj","col","flag","keysObject","Object","keys","i","includes","toString","length","lineCheckerWinCount","range","count","BingoGame","useState","checked","12","state","setState","bingoCounter","setCounter","isWon","every","diagonalCheckerWinCount","map","won","toggle","Array","e","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3c098dd.chunk.js","sourcesContent":["\r\nexport default function Tile({ id, children, onToggle, isSet }) {\r\n  return (\r\n    <>\r\n      {id === \"12\"?<div   key={id} className={`tile  ${isSet ? \"tile--set\" : \"\"}`}>\r\n          {children}\r\n        </div> :\r\n      <div onClick={onToggle}  key={id} className={`tile ${isSet ? \"tile--set\" : \"\"}`}>\r\n        {children}\r\n      </div>\r\n      }\r\n    </>\r\n\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Tile from \"../components/tile\"\r\nimport shuffle from \"shuffle-array\";\r\n\r\nimport \"./styles.css\";\r\n\r\n\r\nconst bbb = [\r\n  \"0  (child noises in the background)\",\r\n  \"1  Hello, hello\",\r\n  \"2  I need to jump another call\",\r\n  \"3  can everyone go on mute\",\r\n  \"4  could you please get closer to the mic\",\r\n  \"5  (loud painful echo/ feedback)\",\r\n  \"6  Next slide please\",\r\n  \"7  can we take this offline?\",\r\n  \"8  is ___ on the call?\",\r\n  \"9  could you share the slides afterwards?\",\r\n  \"10 can somebody grant presenter rights?\",\r\n  \"11 can you email that to everyone?\",\r\n  \"13 sorry I had a problems loging in\",\r\n  \"14 (animal noises in the background)\",\r\n  \"15 sorry I didn't found  the conference id\",\r\n  \"16 i was having connection issue \",\r\n  \"17 i will have to get back to you\",\r\n  \"18 who just joined?\",\r\n  \"19 sorry something ___ with my calender\",\r\n  \"20 do you see any screen?\",\r\n  \"21 let wait for__ !\",\r\n  \"22 you will send the minutes?\",\r\n  \"23 sorry I was on the mute\",\r\n  \"24 can you repeat please?\"\r\n]\r\n\r\n\r\nlet data = shuffle(bbb)\r\n\r\ndata.splice(12,0, [\"12\",\"CONF CALL BINGO\"]);\r\n\r\ndata.reduce(\r\n  (data, value, index) => ({ ...data, [index]: value }),\r\n  {}\r\n);\r\n\r\n\r\nlet diagonalCheckerWinCount = (obj) => {\r\n  let count = 0;\r\n  const range = [0, 1, 2, 3, 4];\r\n  if(Object.keys(obj).length<5){\r\n    count = 0;\r\n  }else{\r\n    if(range.every(index => obj[index * 5 + index])){\r\n      count++\r\n    }\r\n    if(range.every(index => obj[index * 5 + 4 - index])){\r\n      count++\r\n    }\r\n  }\r\n  return count;\r\n}\r\n\r\nlet lineChecker = (obj,col) => {\r\n  let flag = true;\r\n  let keysObject = Object.keys(obj)\r\n  for(let i = 0; i< col;i++){\r\n    if(!keysObject.includes(col[i].toString()) ){\r\n      return false\r\n    }\r\n  }\r\n  for(let i = 0 ; i < col.length; i++){\r\n    if(!obj[col[i]]){\r\n      flag = false\r\n    }\r\n  }\r\n  return flag\r\n}\r\n\r\n\r\nlet lineCheckerWinCount = (obj,range) => {\r\n  let count = 0;\r\n\r\n  if(Object.keys(obj).length<5){\r\n    count = 0;\r\n  }else{\r\n    for(let i = 0 ; i< range.length; i++){\r\n      if(lineChecker(obj,range[i])){\r\n        count++;\r\n      }\r\n    }\r\n  }\r\n  return count\r\n}\r\n\r\n// let rowCheckerWinCount = (obj) => {\r\n//   let count = 0;\r\n//   let rowRange = [\r\n//       [0,1,2,3,4],\r\n//       [5,6,7,8,9],\r\n//       [10,11,12,13,14],\r\n//       [15,16,17,18,19],\r\n//       [20,21,22,23,24],\r\n//   ]\r\n//   if(Object.keys(obj).length<5){\r\n//     count = 0;\r\n//   }else{\r\n//     for(let i = 0 ; i< rowRange.length; i++){\r\n//       if(lineChecker(obj,rowRange[i])){\r\n//         count++;\r\n//       }\r\n//     }\r\n//   }\r\n//   return count\r\n// }\r\n\r\n\r\nfunction BingoGame() {\r\n  const [state, setState] = useState({checked: {12: true}});\r\n  const [bingoCounter, setCounter] = useState(0);\r\n  const isWon = checked => {\r\n    let columnRange = [\r\n      [0,5,10,15,20],\r\n      [1,6,11,16,21],\r\n      [2,7,12,17,22],\r\n      [3,8,13,18,23],\r\n      [4,9,14,19,24],\r\n    ];\r\n    let rowRange = [\r\n      [0,1,2,3,4],\r\n      [5,6,7,8,9],\r\n      [10,11,12,13,14],\r\n      [15,16,17,18,19],\r\n      [20,21,22,23,24],\r\n    ]\r\n    let count = diagonalCheckerWinCount(checked) + lineCheckerWinCount(checked,columnRange) +\r\n      lineCheckerWinCount(checked,rowRange)\r\n    setCounter(count)\r\n  };\r\n  const toggle = id =>\r\n    setState(state => {\r\n      const checked = {...state.checked, [id]: !state.checked[id]};\r\n      const won = isWon(checked);\r\n      return {\r\n        ...state,\r\n        checked,\r\n        won\r\n      };\r\n    });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Bingo</h1>\r\n      <div className=\"wrapper\">\r\n        {Object.keys(data).map(id => (\r\n          <>\r\n            <Tile\r\n              key={id}\r\n              id={id}\r\n              isSet={!!state.checked[id]}\r\n              onToggle={() => toggle(id)}\r\n            >\r\n              {data[id]}\r\n            </Tile>\r\n          </>\r\n\r\n        ))}\r\n      </div>\r\n      {!!bingoCounter && bingoCounter > 0 ?\r\n        [...Array(bingoCounter)].map((e, i) => <span className=\"busterCards\" key={i}>â™¦ Bingo </span>)\r\n        : <></>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BingoGame;\r\n\r\n","import BingoGame from \"./container/bingo\";\n\nfunction App() {\n  return (\n          <BingoGame/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}